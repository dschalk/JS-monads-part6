
==================== FINAL INTERFACE ====================
2016-06-21 18:24:33.32935 UTC

interface main@main:Impossibles 7103
  interface hash: f8259ba11427523fbec8bc42aee2ac3f
  ABI hash: 0af01533e0e3b77c03c51dc332042324
  export-list hash: 82e201a1754cffbd9ed38387ad4d4db5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 991ca390ce5e9a5922db0ef4f07e6618
  sig of: Nothing
  used TH splices: False
  where
exports:
  Impossibles.calc
  Impossibles.calc2
  Impossibles.calc3
  Impossibles.calc4
  Impossibles.calc5
  Impossibles.calc6
  Impossibles.calc7
  Impossibles.cat
  Impossibles.f
  Impossibles.impossibles
  Impossibles.main
  Impossibles.notWhole
  Impossibles.ops
  Impossibles.scoreDiv
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.CPUTime 1ab6ea4a94e752a4c974cfe149b12810
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
d6af872e3e1c6324ad966fbcad5dc91f
  $s$fShow[]2 :: [GHC.Types.Double] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GHC.Types.Double] ->
                 GHC.Show.showList__
                   @ GHC.Types.Double
                   GHC.Float.$fShowDouble1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
559073a77656e3fbb5ddc42149afec49
  $wcat :: GHC.Types.Double -> GHC.Prim.Double# -> GHC.Types.Double
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>, Inline: [0] -}
5f9a67eb500a7ed092d3aff12b14dcb4
  $wnotWhole :: GHC.Prim.Double# -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Double# ->
                 case {__pkg_ccall base-4.8.2.0 rintDouble GHC.Prim.Double#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Double# #)}
                        ww
                        GHC.Prim.realWorld# of wild { (#,#) ds3 ds4 ->
                 case GHC.Integer.Type.decodeDoubleInteger
                        ds4 of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ipv1 0) of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.doubleFromInteger
                             (GHC.Integer.Type.shiftLInteger ipv ipv1) of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## wild2 ww) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }
                   GHC.Types.True
                   -> case GHC.Integer.Type.integerToInt ipv of n { DEFAULT ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==##
                                (GHC.Prim.int2Double#
                                   (GHC.Prim.uncheckedIShiftRA# n (GHC.Prim.negateInt# ipv1)))
                                ww) of wild2 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } } }) -}
0681ac6294ac88288f5283260de7dac0
  calc ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [(GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
52336e6a3f456d7f466ce887df9fe102
  calc2 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [(GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
2b582b06d1668bba2f89c150c1525b3d
  calc3 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [(GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
58e691154d1a91479022509c16941ba2
  calc4 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [(GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
ddb48bee574c0da815f6bf3d6eea7423
  calc5 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [(GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
196d648cb1440551d54954aeacef73cc
  calc6 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [(GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
fc9c49df20e64d5fc2dcaee8a5fa2b68
  calc7 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [(GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double,
         GHC.Types.Double)]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
fd3e7d6d47e571b510af024665876fec
  cat :: GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Double w1 :: GHC.Types.Double ->
                 case w1 of ww { GHC.Types.D# ww1 -> Impossibles.$wcat w ww1 }) -}
d232dc0dcc75a84228d0d0e5ad8d3ac8
  f :: GHC.Types.Double -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GHC.Types.Double ->
                 case GHC.Show.$w$cshowsPrec1
                        0
                        (GHC.Float.RealFracMethods.roundDoubleInteger x)
                        (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 }) -}
ad1da85bdd9ceefcc91a7b4679c1ad73
  impossibles ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> [[GHC.Types.Double]]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U(U)> -}
ee1633f13335a7ee9d82b684eb24e894
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Impossibles.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
46c7a6777a4abc37f5db04bc5352c787
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.CPUTime.getCPUTime1 s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Impossibles.main6
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Impossibles.main5
                        Impossibles.main_imp
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case System.CPUTime.getCPUTime1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case GHC.Integer.Type.doubleFromInteger
                           (GHC.Integer.Type.minusInteger ipv7 ipv1) of wild { DEFAULT ->
                    GHC.Float.$w$sshowSignedFloat
                      GHC.Float.$fShowDouble_$sshowFloat
                      GHC.Show.shows18
                      (GHC.Prim.*## wild 1.0e-12)
                      (GHC.Types.[] @ GHC.Types.Char) })
                   GHC.Types.True
                   ipv6 } } } }) -}
0f90a16635eeb9418d832e41be1058a4
  main2 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 20.0) -}
441fc9b5c324d8eb9d05a85c10256894
  main3 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 12.0) -}
88ff37224ad049469035dd67a5d9c30b
  main4 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 6.0) -}
cac971c80f93e840e7533e2fe6540c85
  main5 ::
    [[GHC.Types.Double]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
ed50e010d9955e8819bbc7bdfc03e79d
  main6 :: GHC.Base.String
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ [GHC.Types.Double]
                        Impossibles.main_imp
                        0 of ww2 { DEFAULT ->
                 case GHC.Show.$wshowSignedInt
                        0
                        ww2
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) -}
a0193c952c94a554030b7efb5a693e35
  main_imp :: [[GHC.Types.Double]]
  {- Unfolding: (Impossibles.impossibles
                   Impossibles.main4
                   Impossibles.main4
                   Impossibles.main3
                   Impossibles.main2
                   Impossibles.main2) -}
c329ee324130aa4ecdbfe575ca65728e
  notWhole :: GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Double ->
                 case w of ww { GHC.Types.D# ww1 -> Impossibles.$wnotWhole ww1 }) -}
9d7a43dcf53b0508ac24cbaca7bb109a
  ops :: [GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
                   Impossibles.cat
                   Impossibles.ops1) -}
54946774be5944d95e137ace71056a55
  ops1 :: [GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
                   GHC.Float.plusDouble
                   Impossibles.ops2) -}
73ad7eb96d51f94fc777a0c2a503f7e2
  ops2 :: [GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
                   GHC.Float.minusDouble
                   Impossibles.ops3) -}
c6770e09445b818c6b9c7f736c94bc8d
  ops3 :: [GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
                   GHC.Float.timesDouble
                   Impossibles.ops4) -}
38047e6a2bd07e080bc8ded0b99c4c79
  ops4 :: [GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
                   Impossibles.scoreDiv
                   (GHC.Types.[]
                      @ (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double))) -}
fd1ba0c02bab1210ebb4337b61ecb684
  scoreDiv ::
    GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ az :: GHC.Types.Double bz :: GHC.Types.Double ->
                 case bz of wild { GHC.Types.D# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x 0.0) of wild1 {
                   GHC.Types.False
                   -> case az of wild2 { GHC.Types.D# x1 ->
                      case GHC.Prim./## x1 x of wild3 { DEFAULT -> GHC.Types.D# wild3 } }
                   GHC.Types.True -> Impossibles.scoreDiv1 } }) -}
5e773a4520531a9c925d3f6df09f6e8c
  scoreDiv1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 99999.0) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

